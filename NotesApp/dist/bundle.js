(()=>{"use strict";function t(){document.getElementById("loading-overlay").classList.remove("hidden")}function e(){document.getElementById("loading-overlay").classList.add("hidden")}class n extends HTMLElement{connectedCallback(){this.innerHTML="<header><h1>Notes App</h1></header>"}}customElements.define("note-header",n);class a extends HTMLElement{connectedCallback(){this.innerHTML="<footer><p>Â© 2025 Notes App</p></footer>"}}customElements.define("note-footer",a);class o extends HTMLElement{connectedCallback(){this.innerHTML='\n            <section id="note-form">\n                <h2>Tambah Catatan</h2>\n                <form id="add-note-form">\n                    <input type="text" id="note-title" placeholder="Judul" required>\n                    <textarea id="note-body" placeholder="Isi catatan" required></textarea>\n                    <button type="submit">Tambah</button>\n                </form>\n            </section>\n        ';const t=this.querySelector("#add-note-form");t.addEventListener("submit",(async e=>{e.preventDefault();const n=this.querySelector("#note-title").value.trim(),a=this.querySelector("#note-body").value.trim();if(n&&a){const e={title:n,body:a};await this.addNoteToAPI(e),t.reset()}}))}async addNoteToAPI(n){try{t();const e=await fetch("https://notes-api.dicoding.dev/v2/notes",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!e.ok){const t=await e.json();throw new Error(t.message||"Gagal menambahkan catatan")}document.querySelector("note-list").fetchNotes()}catch(t){console.error("Error adding note:",t),alert("Gagal menambahkan catatan: "+t.message)}finally{e()}}}customElements.define("note-form",o);class s extends HTMLElement{set noteData(t){this._noteData=t,this.render()}render(){this._noteData&&(this.innerHTML=`\n            <div class="note-item">\n                <h3>${this._noteData.title}</h3>\n                <p>${this._noteData.body}</p>\n                <small>Dibuat pada: ${new Date(this._noteData.createdAt).toLocaleDateString()}</small>\n                <div class="buttons">\n                    <button class="delete-btn">Hapus</button>\n                </div>\n            </div>\n        `,this.querySelector(".delete-btn").addEventListener("click",(async()=>{confirm("Yakin ingin menghapus catatan ini?")&&await this.deleteNoteFromAPI()})))}async deleteNoteFromAPI(){try{t();const e=await fetch(`https://notes-api.dicoding.dev/v2/notes/${this._noteData.id}`,{method:"DELETE"});if(!e.ok){const t=await e.json();throw new Error(t.message||"Gagal menghapus catatan")}this.remove()}catch(t){console.error("Error deleting note:",t),alert("Gagal menghapus catatan: "+t.message)}finally{e()}}}customElements.define("note-item",s);class i extends HTMLElement{constructor(){super(),this.notesData=[]}connectedCallback(){this.fetchNotes()}async fetchNotes(){try{t();const e=await fetch("https://notes-api.dicoding.dev/v2/notes");if(!e.ok){const t=await e.json();throw new Error(t.message||"Gagal mengambil data catatan")}const n=await e.json();this.notesData=n.data,this.render()}catch(t){console.error("Error fetching notes:",t),alert("Gagal mengambil daftar catatan: "+t.message)}finally{e()}}render(){this.innerHTML='\n            <section id="notes-container">\n                <h2>Daftar Catatan</h2>\n                <div id="notes-grid"></div>\n            </section>\n        ',this.notesGrid=this.querySelector("#notes-grid"),this.notesGrid.innerHTML="",this.notesData.forEach((t=>{const e=document.createElement("note-item");e.noteData=t,this.notesGrid.appendChild(e)}))}}customElements.define("note-list",i)})();